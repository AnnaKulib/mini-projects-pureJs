
      [
                {
                    "question": "В function foo(){console.log(this) ключове слово this містить...?",
                    "content": [
                        "Область видимості, в якій визивається функція",
                        "Область видимості, в якій функція була оголошена",
                        "*Посилання на об'єкт, в контексті якого функція викликається",
                        "Посилання на таблицю доступних змінних"
                    ],
                    "correct": 2
                },
                {
                    "question": "Що виведе консоль? function foo(){console.log(this)}; foo(); ",
                    "content": [
                        "null",
                        "*window",
                        "false",
                        "undefined"
                    ],
                    "correct": 1
                },
                {
                    "question": "Що виведе консоль? 'use strict'; function foo(){console.log(this)}; foo(); ",
                    "content": [
                        "null",
                        "window",
                        "false",
                        "*undefined"
                    ],
                    "correct": 3
                },
                {
                    "question": "Що виведе консоль? const obj = { foo(){console.log(this)} }; obj.foo(); ",
                    "content": [
                        "undefined",
                        "window",
                        "*Об'єкт obj",
                        "null"
                    ],
                    "correct": 2
                },
                {
                    "question": "Яка різниця між методами call()/apply() та методом bind()?",
                    "content": [
                        "*call()/apply() викликають функцію на місці, bind() вертає її копію",
                        "bind() викликає функцію на місці, call()/apply() вертає її копію",
                        "нема різниці",
                        "call()/apply() більш старі методи"
                    ],
                    "correct": 0
                },
                {
                    "question": "Що таке властивість __proto__ ?",
                    "content": [
                        "Об'єкт для службових властивостей об'єкта",
                        "Новий стандарт, рекомендований як заміна proto-type",
                        "Метод, що заміняє оператор new",
                        "*Властивість об'єкта, де зберігається посилання на його об'єкт-прототип"
                    ],
                    "correct": 3
                },
                {
                    "question": "Виклик класу без якого оператора викличе помилку?",
                    "content": [
                        "||=",
                        "*new",
                        "??",
                        "="
                    ],
                    "correct": 1
                },
                {
                    "question": "Що робить виклик Object.create()? const A = {value:5}; const B = Object.create(A);",
                    "content": [
                        "Цей запис аналогічний const A = [value:5]",
                        "Встановлює об'єкт В прототипом об'єкта А",
                        "Записує в В посилання на об'єкт [value:5]",
                        "*Встановлює об'єкт А прототипом об'єкта В"
                    ],
                    "correct": 3
                },
                {
                    "question": "Як виконується пошук за ім'ям властивості в ланцюжку прототипів?",
                    "content": [
                        "Пошук закіньчиться, коли буде знайдене останнє співпадання",
                        "Пошук закінчиться, коли буде знайдена властивість зі значенням null",
                        "*Пошук закінчиться, коли буде знайдене перше співпадання",
                        "Пошук закінчиться, коли буде знайдена властивість зі значенням undefined"
                    ],
                    "correct": 2
                },
                {
                    "question": "Що таке екземпляр класу в ООП?",
                    "content": [
                        "Будь який член класу, метод чи змінна",
                        "*Окремий представник класу",
                        "Об'єкт, який знаходиться всередині опису класу",
                        "Публічний метод класу"
                    ],
                    "correct": 1
                },
                {
                    "question": "Що таке інтерфейс в ООП?",
                    "content": [
                        "Набір значних показників об'єкта",
                        "Набір методов, що відповідають за створення інтерфейсу користувача",
                        "*Набір публічних властивостей та методів класу",
                        "Набір приватних властивостей та методів класу"
                    ],
                    "correct": 2
                },
                {
                    "question": "Скільки конструкторів обов'язково треба оголошувати в класі?",
                    "content": [
                        "Один",
                        "Не більше трьох",
                        "Будь-яку кількість",
                        "*Жодного"
                    ],
                    "correct": 3
                },
                {
                    "question": "Що таке статичні властивості класу?",
                    "content": [
                        "Властивості, які неможна змінювати після створення",
                        "Властивості, доступні тільки екземплярам, але не класу",
                        "*Влативості, доступні тільки класу, але не його еземплярам",
                        "Те ж саме, що і приватні властивості"
                    ],
                    "correct": 2
                },
                {
                    "question": "Яку ключове слово реалізує наслідовність класів?",
                    "content": [
                        "super",
                        "inherit",
                        "*extends",
                        "prototype"
                    ],
                    "correct": 2
                },
                {
                    "question": "Що робить super() в конструкторі класу?",
                    "content": [
                        "Викликає конструктор наслідуючого класа",
                        "Ініціалізує створення екземпляра класу",
                        "*Викликає конструктор батьківського класу",
                        "Ініціалізує статичні властивості класу"
                    ],
                    "correct": 2
                }

            ]
        